declare type Rule = {
    rate: number;
    limit: number;
    priority: number;
};
declare type RetryFunction = (delay?: number) => void;
declare type QueueRequest = (RetryFunction: RetryFunction) => Promise<any>;
declare type QueueConfig = {
    rules: {
        [key: string]: Rule;
    };
    default: {
        rule: string;
        key: string;
    };
    overall: Rule;
    retryTime: number;
    ignoreOverallOverheat: boolean;
};
declare class SmartQueue {
    private params;
    private queue;
    private overheat;
    private pending;
    private readonly heatPart;
    constructor(params?: Partial<QueueConfig>);
    request(fn: QueueRequest, key?: string, rule?: string): Promise<any>;
    clear(): void;
    get isOverheated(): boolean;
    get totalLength(): number;
    private add;
    private createQueue;
    private getRule;
    private addRetry;
    private execute;
    private shift;
    private heat;
    private findMostImportant;
    private setCooldown;
    private delay;
    private isCool;
    private remove;
}
export = SmartQueue;
