"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var debug_1 = __importDefault(require("debug"));
var v1_1 = __importDefault(require("uuid/v1"));
var debug = debug_1.default('smart-request-balancer');
var defaultParams = {
    default: {
        rule: 'common',
        key: 'common'
    },
    rules: {
        common: {
            rate: 30,
            limit: 1,
            priority: 3
        }
    },
    overall: {
        rate: 30,
        limit: 1,
        priority: 1
    },
    retryTime: 300,
    ignoreOverallOverheat: true
};
var SmartQueue = /** @class */ (function () {
    function SmartQueue(params) {
        this.queue = new Map();
        this.overheat = Date.now();
        this.pending = false;
        this.params = Object.assign({}, defaultParams, params);
        this.heatPart = (this.params.overall.limit * 1000) / this.params.overall.rate;
    }
    SmartQueue.prototype.request = function (fn, key, rule) {
        var _this = this;
        if (key === void 0) { key = this.params.default.key; }
        if (rule === void 0) { rule = this.params.default.rule; }
        debug('Adding queue request', key, rule);
        return new Promise(function (resolve, reject) {
            _this.add(fn, function (error, data) {
                if (error) {
                    debug('Request resolving error', key, rule, error);
                    return reject(error);
                }
                debug('Resolving queue request', key, rule);
                return resolve(data);
            }, key, rule);
        });
    };
    SmartQueue.prototype.clear = function () {
        debug('Clearing all queues');
        this.queue.clear();
    };
    Object.defineProperty(SmartQueue.prototype, "isOverheated", {
        get: function () {
            return this.overheat > Date.now();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SmartQueue.prototype, "totalLength", {
        get: function () {
            var length = 0;
            this.queue.forEach(function (queue) {
                length += queue.data.length;
            });
            return length;
        },
        enumerable: true,
        configurable: true
    });
    SmartQueue.prototype.add = function (request, callback, key, rule) {
        var queue = this.createQueue(key, request, callback, rule);
        debug('Adding request to the queue', queue.id);
        if (!this.pending) {
            this.execute(queue);
        }
    };
    SmartQueue.prototype.createQueue = function (queueName, request, callback, rule) {
        if (!this.queue.has(queueName)) {
            var queueId = v1_1.default();
            debug('Creating queue', queueId, queueName, rule);
            this.queue.set(queueName, {
                cooldown: Date.now(),
                data: [],
                id: queueId,
                key: queueName,
                rule: this.getRule(rule),
                ruleName: rule
            });
        }
        var queue = this.queue.get(queueName);
        var queueItemId = v1_1.default();
        debug('Adding item to existing queue', queue.id, queueItemId);
        queue.data.push({
            callback: callback,
            id: queueItemId,
            request: request
        });
        return queue;
    };
    SmartQueue.prototype.getRule = function (name) {
        if (this.params.rules[name]) {
            return this.params.rules[name];
        }
        this.params.rules[name] = this.params.rules[this.params.default.rule];
        return this.params.rules[name];
    };
    SmartQueue.prototype.addRetry = function (item, delay) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('Adding retry', item.queue.id, delay);
                        return [4 /*yield*/, this.delay(delay * 1000)];
                    case 1:
                        _a.sent();
                        this.add(item.item.request, item.item.callback, item.queue.key, item.queue.ruleName);
                        return [2 /*return*/];
                }
            });
        });
    };
    SmartQueue.prototype.execute = function (queue) {
        return __awaiter(this, void 0, void 0, function () {
            var retryState, retryTimer, retryFn, nextItem, requestPromise, data, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (queue) {
                            debug('Executing queue', queue.id);
                        }
                        this.pending = true;
                        retryState = false;
                        retryTimer = 0;
                        retryFn = function (delay) {
                            retryState = true;
                            retryTimer = delay || _this.params.retryTime;
                        };
                        return [4 /*yield*/, this.shift(queue)];
                    case 1:
                        nextItem = _a.sent();
                        if (!nextItem || !nextItem.item) {
                            return [2 /*return*/];
                        }
                        debug('Executing queue item', nextItem.item.id);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        requestPromise = nextItem.item.request(retryFn);
                        this.heat();
                        this.execute();
                        return [4 /*yield*/, requestPromise];
                    case 3:
                        data = _a.sent();
                        if (retryState) {
                            this.addRetry(nextItem, retryTimer);
                        }
                        else {
                            debug('Queue item executed successfully', nextItem.item.id);
                            nextItem.item.callback(null, data);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        debug('Queue item request error', error_1);
                        nextItem.item.callback(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SmartQueue.prototype.shift = function (queue) {
        return __awaiter(this, void 0, void 0, function () {
            var currentQueue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findMostImportant(queue)];
                    case 1:
                        currentQueue = _a.sent();
                        if (!currentQueue || currentQueue.data.length === 0) {
                            return [2 /*return*/, null];
                        }
                        this.setCooldown(currentQueue);
                        return [2 /*return*/, {
                                item: currentQueue.data.shift(),
                                queue: currentQueue
                            }];
                }
            });
        });
    };
    SmartQueue.prototype.heat = function () {
        var _this = this;
        if (this.params.ignoreOverallOverheat) {
            return;
        }
        this.overheat = Date.now() + this.heatPart;
        var lastOverheat = this.overheat;
        debug('Heating overall queue', this.heatPart);
        setTimeout(function () {
            var leftOverHeat = Math.max(_this.overheat - lastOverheat, 0);
            _this.overheat = Date.now() + leftOverHeat;
            debug('Cooling down overall queue', leftOverHeat);
        }, this.heatPart);
    };
    SmartQueue.prototype.findMostImportant = function (bestQueue) {
        return __awaiter(this, void 0, void 0, function () {
            var maximumPriority, selectedQueue, minimalCooldown, now, defactoMinimalCooldown;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (bestQueue) {
                            debug('Providing best queue', bestQueue.id);
                            return [2 /*return*/, bestQueue];
                        }
                        maximumPriority = Infinity;
                        selectedQueue = null;
                        minimalCooldown = Infinity;
                        now = Date.now();
                        this.queue.forEach(function (queue) {
                            if (queue.rule.priority < maximumPriority && queue.data.length && _this.isCool(queue, now)) {
                                maximumPriority = queue.rule.priority;
                                selectedQueue = queue;
                            }
                            if (queue.cooldown < minimalCooldown && queue.cooldown > now) {
                                minimalCooldown = queue.cooldown;
                            }
                        });
                        defactoMinimalCooldown = minimalCooldown - now;
                        if (!(!selectedQueue && defactoMinimalCooldown > 0 && minimalCooldown !== Infinity)) return [3 /*break*/, 2];
                        debug('Waiting for cooldown', defactoMinimalCooldown);
                        return [4 /*yield*/, this.delay(defactoMinimalCooldown)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.findMostImportant()];
                    case 2:
                        if (!(this.isOverheated && !this.params.ignoreOverallOverheat)) return [3 /*break*/, 4];
                        debug('Everything is overheated');
                        return [4 /*yield*/, this.delay(this.overheat - now)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.findMostImportant()];
                    case 4:
                        if (!selectedQueue && this.totalLength === 0) {
                            debug('No queues available. Stopping queue');
                            this.pending = false;
                            return [2 /*return*/, null];
                        }
                        debug('Finding best queue', selectedQueue && selectedQueue.id);
                        return [2 /*return*/, selectedQueue];
                }
            });
        });
    };
    SmartQueue.prototype.setCooldown = function (queue) {
        var _this = this;
        var ruleData = this.params.rules[queue.ruleName];
        var defactoCooldown = (ruleData.limit * 1000) / ruleData.rate;
        var cooldown = Date.now() + defactoCooldown;
        queue.cooldown = cooldown;
        debug('Setting cooldown', queue.id, defactoCooldown);
        setTimeout(function () {
            queue.cooldown = Date.now() + Math.max(queue.cooldown - cooldown, 0);
            debug('Removing cooldown', queue.id, defactoCooldown);
            if (!queue.data.length) {
                _this.remove(queue.key);
            }
        }, defactoCooldown);
    };
    SmartQueue.prototype.delay = function (time) {
        return new Promise(function (resolve) { return setTimeout(resolve, time); });
    };
    SmartQueue.prototype.isCool = function (queue, comparedTo) {
        return queue.cooldown <= comparedTo;
    };
    SmartQueue.prototype.remove = function (key) {
        debug('Deleting queue', key);
        this.queue.delete(key);
    };
    return SmartQueue;
}());
module.exports = SmartQueue;
